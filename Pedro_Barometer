/#include <Aerospace.h>
#include <SoftwareSerial.h>
#include "TimerOne.h"https://create.arduino.cc/
//-----GPRS-----
#define pinBotaoCall 12
String telefoneSMS;//Definir o numero
 String msg;
//--------------------

SoftwareSerial serialGPS(10, 11); // RX, TX

SoftwareSerial serialGSM(10, 11); // RX, TX
Aerospace aerospace;


void configuraGSM();
void enviaSMS(String telefone, String mensagem);

void setup() {
    Serial.begin(9600);

    //------------------GPRS-----------------------------
    serialGSM.begin(9600); 
    pinMode(pinBotaoCall, INPUT_PULLUP);
    Serial.println("Sketch Iniciado!");
    configuraGSM(); //funcao para receber sms
    /*----------------------------------GPS----------------------------------*/
    serialGPS.begin(9600);
    Serial.println("Aguardando sinal dos satélites...");

  //-------------------------Timer--------------------------------------
  Timer1.initialize(500000); // Inicializa o Timer1 e configura para um período de 0,5 segundos //acell
  Timer1.attachInterrupt(enviaSMS); // Configura a função callback() como a função para ser chamada a cada interrupção do Timer1

}

void loop() {
  bool recebido = false;
  serialGPS.listen();
  if(!serialGPS.available())
          serialGPS.listen();

  while (serialGPS.available()) {
  else {
     char cIn = serialGPS.read();
     recebido = aerospace.GPS_encode(cIn);

@@ -81,9 +102,25 @@ void loop() {
     //velocidade
     float velocidade;
     velocidade = aerospace.GPS_f_speed_kmph();   //km/h

     Serial.print("Velocidade (km/h): ");
     Serial.println(velocidade, 2);  //Conversão de Nós para Km/h
     msg="GPS funcionando\nLatitude:"+latitude/1000000;//mudar para 6 caracteres depois da virgula
     msg=msg+"\nLongitude:"+longitude/1000000+//mudar para 6 caracteres depois da virgula
                          "\nIdade da mensagem:"+idadeInfo+
                          "\nAltitude"+altitudeGPS/100+
                          "\nVelocidade"+velocidade;


    }
  }

}

void configuraGSM() {
   serialGSM.print("AT+CMGF=1\n;AT+CNMI=2,2,0,0,0\n;ATX4\n;AT+COLP=1\n"); 
}
void enviaSMS() {
  serialGSM.print("AT+CMGS=\"" + telefoneSMS + "\"\n");
  serialGSM.print(msg + "\n");
  //serialGSM.print((char)26); 
}
//-----------------------Barometer---------------
int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
//-------------------------------------------
